<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wjxiz&#39;blog</title>
    <link>http://wjxiz.com/</link>
    <description>Recent content on wjxiz&#39;blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>不要在睡前刷Leetcode，容易导致失眠。。。</copyright>
    <lastBuildDate>Mon, 16 May 2016 21:58:25 +0800</lastBuildDate>
    <atom:link href="http://wjxiz.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>宝宝写的~</title>
      <link>http://wjxiz.com/post/miaomiao/</link>
      <pubDate>Mon, 16 May 2016 21:58:25 +0800</pubDate>
      
      <guid>http://wjxiz.com/post/miaomiao/</guid>
      <description>&lt;p&gt;徐先生是一个特别特别特别单纯的boy。。单纯到什么程度呢？就是见过他的每一个人都说这孩子挺乖的。。&lt;/p&gt;

&lt;p&gt;认识我的小伙伴都知道徐先生是我买包送的。。其实讲真。。作为一个不喜欢给别人添麻烦的girl。。一开始我是拒绝搭理徐先生的。。总觉得在他那么忙的时候多说一句话都是挺过分的事。。但是这世上毕竟有一种缘分叫做一见钟情。。&lt;/p&gt;

&lt;p&gt;不过我跟徐先生的缘起。。真是可以追溯到很多很多年以前。。2011年的某个夏天。。徐先生在白白手机上第一次看见一个叫贝贝的女生。。当时还很兴奋的调侃了白白几句。。有关于高考的夏天的记忆往往特别深刻。。当他知道我就是那个贝贝的一瞬间。。整个世界都充斥着一种奇妙的感觉。。仿佛我们真的认识了很多很多年。。&lt;/p&gt;

&lt;p&gt;后来就很顺利成章的在一起。。没有任何无谓的忸怩与矜持。。也没有任何不必的矫情与造作。。&lt;/p&gt;

&lt;p&gt;在5月12号之前。。我们真正在一起的时间只有6天。。剩下一百多天的时光里。。我们全靠视频语音度过。。聊天记录已经完全刷不到顶。。对于两个都是刚结束异地恋的人来讲。。再去选择这样子的生活也真是蛮拼的。。我并不完全了解他眼中完美的爱情。。但是却深切的知晓我想要的东西。。陪伴是最长情的告白。。但陪伴并不是他时时刻刻分分秒秒都在我左右。。而是我只要一想起他就满心欢喜。。&lt;/p&gt;

&lt;p&gt;当然。。一段感情里抛却了那些珠光宝气的爱。。剩下的就是悄无声息的生活。。异地恋并没有我曾经以为的那样能接受。。而时光却比我想象的快得多。。我们都有了彼此的生活已经需要努力去完成的东西。。我们也都拥有着完全不同的朋友与生活方式。。我醒着的时候他在午睡。。我正要去睡他却恰好醒了。。我们在不停的错过与追逐。。又在不停的重逢与相遇。。我们明明离得那么远。。却有着那么多重合的轨迹。。&lt;/p&gt;

&lt;p&gt;作为一个单纯且耿直的boy。。早期的徐先生是真的完全是一种女生的心思我不猜的态度。。每次不开心。。我就会说我要去睡了。。徐先生淡定的回了一个哦。。哦！哦！！！听完这句话的我当时就傻了。。当然如果你觉得他会以为我不开心然后来哄我那就真是太太太天真了。。已经不记得有多少次。。我半夜两三点起来。。打开视频。。严肃的徐先生讲。。我们谈谈。。也是不知他有没有被一脸严肃的我吓懵过。。&lt;/p&gt;

&lt;p&gt;然而当我们都很懂得相互珍惜的原理。。所有的问题也就都不再是问题。。不会主动哄女孩子的徐先生也会开始想想看我会喜欢什么。。也会开始陪我挑口红的颜色香水的味道。。乘两个小时的小火车去帮我买包再乘两个小时的小火车回来。。而我也会逐渐收敛起自己太过外露的锋芒。。逐渐放弃自己那么矫情的脾气。。爱一个人无非就是为他做更好的自己。。&lt;/p&gt;

&lt;p&gt;人生就是一场奇妙的旅行。。永远不知下一个转角会遇上什么样的人。。年纪大了的我却更加喜欢做一些矫情的事情。。嗯。。希望以后你们遇见的人都是自己爱的人。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MYO智能腕带开发简介</title>
      <link>http://wjxiz.com/post/intro-myo/</link>
      <pubDate>Mon, 16 May 2016 18:08:29 +0800</pubDate>
      
      <guid>http://wjxiz.com/post/intro-myo/</guid>
      <description>

&lt;h3 id=&#34;myo-armband-是个啥:a311633808d1485dd5525bf89472a696&#34;&gt;MYO armband 是个啥？&lt;/h3&gt;

&lt;p&gt;一个由加拿大的一个实验室开发的智能硬件，将其戴在手肘处，就可以通过它进行一些操作控制。具体可以点这里看一看&lt;a href=&#34;www.myo.com&#34;&gt;官方网站和演示&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;开发者视角:a311633808d1485dd5525bf89472a696&#34;&gt;开发者视角&lt;/h3&gt;

&lt;p&gt;MYO实际上可以提供两种类型的数据 &lt;code&gt;空间数据spatial data&lt;/code&gt;和&lt;code&gt;手势数据gestural data&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;空间数据不用多说，可以告诉应用程序 使用者手臂的指向和位移。SDK 对于spatial data 又有两种类型：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一个代表着使用者手臂所指方向的 指向数据，这个指向数据是由一个4元组构成，这个4元组可以变转化成其他表示，比如旋转矩阵，比如欧拉角。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;加速向量。代表着这个armband在任何时刻的一个加速度朝向。这是一个三维向量（这很容易理解）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于手势数据，它可以告诉应用程序 这个armband被戴在哪一只手上，以及它的朝向。这些判断是在带上之后，做一个 同步手势 的时候判定的。 这个腕表还会给予反馈，这个反馈就是 震动 和声音。每次你做什么手势，都会有一定的反馈。&lt;/p&gt;

&lt;h3 id=&#34;hello-myo-cpp:a311633808d1485dd5525bf89472a696&#34;&gt;hello-myo.cpp&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
// Copyright (C) 2013-2014 Thalmic Labs Inc.
// Distributed under the Myo SDK license agreement. See LICENSE.txt for details.
#define _USE_MATH_DEFINES
#include &amp;lt;cmath&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;iomanip&amp;gt;
#include &amp;lt;stdexcept&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;algorithm&amp;gt;

// The only file that needs to be included to use the Myo C++ SDK is myo.hpp.
#include &amp;lt;myo/myo.hpp&amp;gt;

// Classes that inherit from myo::DeviceListener can be used to receive events from Myo devices. DeviceListener
// provides several virtual functions for handling different kinds of events. If you do not override an event, the
// default behavior is to do nothing.
class DataCollector : public myo::DeviceListener {
public:
    DataCollector()
    : onArm(false), isUnlocked(false), roll_w(0), pitch_w(0), yaw_w(0), currentPose()
    {
    }

    // onUnpair() is called whenever the Myo is disconnected from Myo Connect by the user.
    void onUnpair(myo::Myo* myo, uint64_t timestamp)
    {
        // We&#39;ve lost a Myo.
        // Let&#39;s clean up some leftover state.
        roll_w = 0;
        pitch_w = 0;
        yaw_w = 0;
        onArm = false;
        isUnlocked = false;
    }

    // onOrientationData() is called whenever the Myo device provides its current orientation, which is represented
    // as a unit quaternion.
    void onOrientationData(myo::Myo* myo, uint64_t timestamp, const myo::Quaternion&amp;lt;float&amp;gt;&amp;amp; quat)
    {
        using std::atan2;
        using std::asin;
        using std::sqrt;
        using std::max;
        using std::min;

        // Calculate Euler angles (roll, pitch, and yaw) from the unit quaternion.
        float roll = atan2(2.0f * (quat.w() * quat.x() + quat.y() * quat.z()),
                           1.0f - 2.0f * (quat.x() * quat.x() + quat.y() * quat.y()));
        float pitch = asin(max(-1.0f, min(1.0f, 2.0f * (quat.w() * quat.y() - quat.z() * quat.x()))));
        float yaw = atan2(2.0f * (quat.w() * quat.z() + quat.x() * quat.y()),
                        1.0f - 2.0f * (quat.y() * quat.y() + quat.z() * quat.z()));

        // Convert the floating point angles in radians to a scale from 0 to 18.
        roll_w = static_cast&amp;lt;int&amp;gt;((roll + (float)M_PI)/(M_PI * 2.0f) * 18);
        pitch_w = static_cast&amp;lt;int&amp;gt;((pitch + (float)M_PI/2.0f)/M_PI * 18);
        yaw_w = static_cast&amp;lt;int&amp;gt;((yaw + (float)M_PI)/(M_PI * 2.0f) * 18);
    }

    // onPose() is called whenever the Myo detects that the person wearing it has changed their pose, for example,
    // making a fist, or not making a fist anymore.
    void onPose(myo::Myo* myo, uint64_t timestamp, myo::Pose pose)
    {
        currentPose = pose;

        if (pose != myo::Pose::unknown &amp;amp;&amp;amp; pose != myo::Pose::rest) {
            // Tell the Myo to stay unlocked until told otherwise. We do that here so you can hold the poses without the
            // Myo becoming locked.
            myo-&amp;gt;unlock(myo::Myo::unlockHold);

            // Notify the Myo that the pose has resulted in an action, in this case changing
            // the text on the screen. The Myo will vibrate.
            myo-&amp;gt;notifyUserAction();
        } else {
            // Tell the Myo to stay unlocked only for a short period. This allows the Myo to stay unlocked while poses
            // are being performed, but lock after inactivity.
            myo-&amp;gt;unlock(myo::Myo::unlockTimed);
        }
    }

    // onArmSync() is called whenever Myo has recognized a Sync Gesture after someone has put it on their
    // arm. This lets Myo know which arm it&#39;s on and which way it&#39;s facing.
    void onArmSync(myo::Myo* myo, uint64_t timestamp, myo::Arm arm, myo::XDirection xDirection, float rotation,
                   myo::WarmupState warmupState)
    {
        onArm = true;
        whichArm = arm;
    }

    // onArmUnsync() is called whenever Myo has detected that it was moved from a stable position on a person&#39;s arm after
    // it recognized the arm. Typically this happens when someone takes Myo off of their arm, but it can also happen
    // when Myo is moved around on the arm.·
    void onArmUnsync(myo::Myo* myo, uint64_t timestamp)
    {
        onArm = false;
    }

    // onUnlock() is called whenever Myo has become unlocked, and will start delivering pose events.
    void onUnlock(myo::Myo* myo, uint64_t timestamp)
    {
        isUnlocked = true;
    }

    // onLock() is called whenever Myo has become locked. No pose events will be sent until the Myo is unlocked again.
    void onLock(myo::Myo* myo, uint64_t timestamp)
    {
        isUnlocked = false;
    }

    // There are other virtual functions in DeviceListener that we could override here, like onAccelerometerData().
    // For this example, the functions overridden above are sufficient.

    // We define this function to print the current values that were updated by the on...() functions above.
    void print()
    {
        // Clear the current line
        std::cout &amp;lt;&amp;lt; &#39;\r&#39;;

        // Print out the orientation. Orientation data is always available, even if no arm is currently recognized.
        std::cout &amp;lt;&amp;lt; &#39;[&#39; &amp;lt;&amp;lt; std::string(roll_w, &#39;*&#39;) &amp;lt;&amp;lt; std::string(18 - roll_w, &#39; &#39;) &amp;lt;&amp;lt; &#39;]&#39;
                  &amp;lt;&amp;lt; &#39;[&#39; &amp;lt;&amp;lt; std::string(pitch_w, &#39;*&#39;) &amp;lt;&amp;lt; std::string(18 - pitch_w, &#39; &#39;) &amp;lt;&amp;lt; &#39;]&#39;
                  &amp;lt;&amp;lt; &#39;[&#39; &amp;lt;&amp;lt; std::string(yaw_w, &#39;*&#39;) &amp;lt;&amp;lt; std::string(18 - yaw_w, &#39; &#39;) &amp;lt;&amp;lt; &#39;]&#39;;

        if (onArm) {
            // Print out the lock state, the currently recognized pose, and which arm Myo is being worn on.

            // Pose::toString() provides the human-readable name of a pose. We can also output a Pose directly to an
            // output stream (e.g. std::cout &amp;lt;&amp;lt; currentPose;). In this case we want to get the pose name&#39;s length so
            // that we can fill the rest of the field with spaces below, so we obtain it as a string using toString().
            std::string poseString = currentPose.toString();

            std::cout &amp;lt;&amp;lt; &#39;[&#39; &amp;lt;&amp;lt; (isUnlocked ? &amp;quot;unlocked&amp;quot; : &amp;quot;locked  &amp;quot;) &amp;lt;&amp;lt; &#39;]&#39;
                      &amp;lt;&amp;lt; &#39;[&#39; &amp;lt;&amp;lt; (whichArm == myo::armLeft ? &amp;quot;L&amp;quot; : &amp;quot;R&amp;quot;) &amp;lt;&amp;lt; &#39;]&#39;
                      &amp;lt;&amp;lt; &#39;[&#39; &amp;lt;&amp;lt; poseString &amp;lt;&amp;lt; std::string(14 - poseString.size(), &#39; &#39;) &amp;lt;&amp;lt; &#39;]&#39;;
        } else {
            // Print out a placeholder for the arm and pose when Myo doesn&#39;t currently know which arm it&#39;s on.
            std::cout &amp;lt;&amp;lt; &#39;[&#39; &amp;lt;&amp;lt; std::string(8, &#39; &#39;) &amp;lt;&amp;lt; &#39;]&#39; &amp;lt;&amp;lt; &amp;quot;[?]&amp;quot; &amp;lt;&amp;lt; &#39;[&#39; &amp;lt;&amp;lt; std::string(14, &#39; &#39;) &amp;lt;&amp;lt; &#39;]&#39;;
        }

        std::cout &amp;lt;&amp;lt; std::flush;
    }

    // These values are set by onArmSync() and onArmUnsync() above.
    bool onArm;
    myo::Arm whichArm;

    // This is set by onUnlocked() and onLocked() above.
    bool isUnlocked;

    // These values are set by onOrientationData() and onPose() above.
    int roll_w, pitch_w, yaw_w;
    myo::Pose currentPose;
};

int main(int argc, char** argv)
{
    // We catch any exceptions that might occur below -- see the catch statement for more details.
    try {

    // First, we create a Hub with our application identifier. Be sure not to use the com.example namespace when
    // publishing your application. The Hub provides access to one or more Myos.
    myo::Hub hub(&amp;quot;com.example.hello-myo&amp;quot;);

    std::cout &amp;lt;&amp;lt; &amp;quot;Attempting to find a Myo...&amp;quot; &amp;lt;&amp;lt; std::endl;

    // Next, we attempt to find a Myo to use. If a Myo is already paired in Myo Connect, this will return that Myo
    // immediately.
    // waitForMyo() takes a timeout value in milliseconds. In this case we will try to find a Myo for 10 seconds, and
    // if that fails, the function will return a null pointer.
    myo::Myo* myo = hub.waitForMyo(10000);

    // If waitForMyo() returned a null pointer, we failed to find a Myo, so exit with an error message.
    if (!myo) {
        throw std::runtime_error(&amp;quot;Unable to find a Myo!&amp;quot;);
    }

    // We&#39;ve found a Myo.
    std::cout &amp;lt;&amp;lt; &amp;quot;Connected to a Myo armband!&amp;quot; &amp;lt;&amp;lt; std::endl &amp;lt;&amp;lt; std::endl;

    // Next we construct an instance of our DeviceListener, so that we can register it with the Hub.
    DataCollector collector;

    // Hub::addListener() takes the address of any object whose class inherits from DeviceListener, and will cause
    // Hub::run() to send events to all registered device listeners.
    hub.addListener(&amp;amp;collector);

    // Finally we enter our main loop.
    while (1) {
        // In each iteration of our main loop, we run the Myo event loop for a set number of milliseconds.
        // In this case, we wish to update our display 20 times a second, so we run for 1000/20 milliseconds.
        hub.run(1000/20);
        // After processing events, we call the print() member function we defined above to print out the values we&#39;ve
        // obtained from any events that have occurred.
        collector.print();
    }

    // If a standard exception occurred, we print out its message and exit.
    } catch (const std::exception&amp;amp; e) {
        std::cerr &amp;lt;&amp;lt; &amp;quot;Error: &amp;quot; &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; std::endl;
        std::cerr &amp;lt;&amp;lt; &amp;quot;Press enter to continue.&amp;quot;;
        std::cin.ignore();
        return 1;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Minimiser automate 最小化有限自动机</title>
      <link>http://wjxiz.com/post/minimiser-automate/</link>
      <pubDate>Mon, 09 May 2016 11:33:37 +0200</pubDate>
      
      <guid>http://wjxiz.com/post/minimiser-automate/</guid>
      <description>

&lt;p&gt;这篇 记录一下 Moore法 最小化有限自动机的方法。&lt;/p&gt;

&lt;h2 id=&#34;moore:10296f9909abc3162244997f578c95c6&#34;&gt;Moore&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;L&amp;rsquo;algorithme de Moore pour la minimisation d&amp;rsquo;automates est dû à Moore 1956. L&amp;rsquo;algorithme maintient une partition des états, constituée initialement de deux classes, formées des états terminaux et des autres. La partition est ensuite raffinée jusqu&amp;rsquo;à obtenir une partition stable. À chaque étape, on remplace la partition courante par la partition qui est l&amp;rsquo;intersection de la partition courante et des partitions induites par les préimages des classes par les lettres de l&amp;rsquo;alphabet. L&amp;rsquo;algorithme s&amp;rsquo;arrête lorsque ce remplacement ne modifie pas la partition courante. On montre que les classes de la partition finale sont constituées d&amp;rsquo;états inséparables, et forment donc les états de l&amp;rsquo;automate minimal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;来自维基百科 法语&lt;/p&gt;

&lt;p&gt;我来翻译一下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;为了实现最小化自动机的Moore算法，是由Moore在1956年实现的. 这个算法 一开始将所有状态分成两类，一类是“终结类”，另一类是“非终结类”, 在计算过程中不断的进行状态划分直至 不再出现新的状态集。在每一步，我们都将 经过一次状态变化后 进如其他状态集的状态 给单独区分出来，划归到一个新的状态集。我们重复这个步骤 直至所有状态集稳定。我们可以证明，这个最后的划分 无法再被继续分割，并且这个状态集就称为 自动机的最小状态集。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;翻译出来就是这个意思，下面我用符号语言和例子 来解释一下这个算法。&lt;/p&gt;

&lt;h2 id=&#34;规则阐述:10296f9909abc3162244997f578c95c6&#34;&gt;规则阐述&lt;/h2&gt;

&lt;p&gt;最小有限自动机，是指满足下述条件的确定有限自动机:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;没有无用状态(无用状态已删除)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;没有等价状态(等价状态已合并)。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;第一步-删除无用状态:10296f9909abc3162244997f578c95c6&#34;&gt;第一步：删除无用状态&lt;/h4&gt;

&lt;p&gt;定义：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;无用状态是指自动机从开始态出发，对任何符号串都不能到达的状态。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;判别方法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;构造有用状态集 Qus&lt;/li&gt;
&lt;li&gt;设 q0 为开始态，则 令 q0∈Qus ；&lt;/li&gt;
&lt;li&gt;若 qi∈Qus 且有 d(qi,a)= qj 则令 qj∈Qus ；&lt;/li&gt;
&lt;li&gt;重复执行⑵，直到Qus不再增大为止。&lt;/li&gt;
&lt;li&gt;从状态集Q中，删除不在Qus中的所有状态。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;可能第三步不太好理解，说简单点，就是如果有一个在 有用状态集中的状态Qi 可以经过 a 变换到 qj， 那么qj也是有用状态，qj就是一个可达状态。 可以想象，如果有一个状态qn，经过任何变化都不可以到达，那么显然qn就是一个无用状态，他对状态机 的变换过程不产生任何影响，我们在最小化过程中可以直接删除它。&lt;/p&gt;

&lt;p&gt;####第二步：合并等价状态，划分不等价状态（重点）&lt;/p&gt;

&lt;p&gt;定义： 两个状态i,j等价，当且仅当满足下面两个条件：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;必须同是结束态，或同不是结束态；&lt;/li&gt;
&lt;li&gt;对所有字母表上符号，状态i,j必变换到等价状态。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;方法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;初始，把状态集Q化分成两个不等价子集:Q1(结束状态集)， Q2(非结束状态集)；&lt;/li&gt;
&lt;li&gt;对于每一个子集再进行划分，如果同一子集中的 两个状态，经过某个变换后，进入到了不同的子集中，那么这两个状态就需要被 划分开。&lt;/li&gt;
&lt;li&gt;重复步骤2，直至不能再划分。&lt;/li&gt;
&lt;li&gt;最终的不同子集就是最终的不同状态集。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对于2，解释一下： 比如 d(i,a)∈Qm , d(j,a)∈Qn 且 m≠n,那么dj,dj就需要被划分到不同的子集中去。在这个变换过程中需要考虑该状态所有的变换可能。&lt;/p&gt;

&lt;p&gt;###这边举个wikipédia上的例子：&lt;/p&gt;

&lt;p&gt;图一：
&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/c/cd/DFA_to_be_minimized.jpg&#34; alt=&#34;图一&#34; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到 状态c d e 是终结的，abf是非终结的，所以一开始划分成两个状态集 ：Q1{a,b,f} 和 Q2{c,d,e}&lt;/p&gt;

&lt;p&gt;然后开始进行划分:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a b f 经过 0 都指向Q1 ，在这一步 不划分&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;a b 经过 1  都指向 Q2（d 和 c） ，而f 经过1 指向了 Q1（因为f在Q1中，f进过1 指向了自己），所以这个时候把 f 划分出来 得到Q3 {f}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;c d e 经过 0 都指向 Q2 ，因此不划分 ，经过 1 都指向Q3 ，因此也不划分&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;再看f ，因为f 是单独状态集，所以不存在划分的可能性&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;很关键： 在每次划分完一次之后，需要再进行一次划分，因为原来指向同一个状态集的 状态 在 进行一次划分之后，可能指向了不同的状态集了。那么好 ，再看一下所有的状态，发现没有新变化了。至此 划分完毕。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;得到最终结果如图二：
&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/6/66/Minimized_DFA.jpg&#34; alt=&#34;图二&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok.去吃饭了。有空把 C语言的 “注释” 状态集 贴出来，分析一下最小化。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>形式语言与自动机-lemme d&#39;etoile</title>
      <link>http://wjxiz.com/post/lemme-etoile/</link>
      <pubDate>Mon, 02 May 2016 00:30:41 +0200</pubDate>
      
      <guid>http://wjxiz.com/post/lemme-etoile/</guid>
      <description>&lt;p&gt;明天补考 language formel et automate 形式语言与自动机理论。找到一篇非常好的关于泵引理的讲解.pdf 在&lt;a href=&#34;https://github.com/wjxiz/wjxiz.github.io/blob/master/attached/note-ch04.pdf&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed=&#34;true&#34;  href=&#34;https://www.flickr.com/photos/141572190@N07/26759517975/in/dateposted-public/&#34; title=&#34;1&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1615/26759517975_d8f6160c90_c.jpg&#34; width=&#34;800&#34; height=&#34;649&#34; alt=&#34;1&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed=&#34;true&#34;  href=&#34;https://www.flickr.com/photos/141572190@N07/26692526301/in/dateposted-public/&#34; title=&#34;2&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1719/26692526301_e188c4e79b_c.jpg&#34; width=&#34;800&#34; height=&#34;509&#34; alt=&#34;2&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed=&#34;true&#34;  href=&#34;https://www.flickr.com/photos/141572190@N07/26734180666/in/dateposted-public/&#34; title=&#34;3&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1720/26734180666_74c08d11a7_c.jpg&#34; width=&#34;800&#34; height=&#34;495&#34; alt=&#34;3&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed=&#34;true&#34;  href=&#34;https://www.flickr.com/photos/141572190@N07/26155836393/in/dateposted-public/&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1573/26155836393_14fe999054_c.jpg&#34; width=&#34;800&#34; height=&#34;471&#34; alt=&#34;4&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git使用初探</title>
      <link>http://wjxiz.com/post/git-use-introduce/</link>
      <pubDate>Wed, 27 Apr 2016 15:00:39 +0200</pubDate>
      
      <guid>http://wjxiz.com/post/git-use-introduce/</guid>
      <description>

&lt;h2 id=&#34;git是什么-有什么用:38b7fe8ba42feb5431437908455a3b68&#34;&gt;Git是什么？有什么用？&lt;/h2&gt;

&lt;p&gt;Git的介绍网上一大堆，我的理解是，可以给一个工程创建多个副本，各副本之间可以独立开发，也可以相互影响。举一个简单地例子：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我现在有一个项目，需要两个函数，正好有两个开发人员。两个开发人员可以在各自的电脑上下载这个初始项目，然后写各自的函数。写完之后上传，合并之后，就得到了拥有两个函数的项目。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于我这个把github当成学习记录的人来说，git也没那么大作用了。也就是上传上传代码，督促自己学习。忘了说了Git和Github是两个不同概念，github是根据Git来做的一个大型网络代码托管库，Git是实现代码托管、版本管理的技术核心。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;github怎么用:38b7fe8ba42feb5431437908455a3b68&#34;&gt;GitHub怎么用？&lt;/h2&gt;

&lt;p&gt;主要有一下几个Step：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;申请Github账户&lt;/li&gt;
&lt;li&gt;安装命令行Git工具&lt;/li&gt;
&lt;li&gt;配置本机SSH 公私钥对(private key &amp;amp;&amp;amp; public key )&lt;/li&gt;
&lt;li&gt;向GitHub上传你的 public key&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;上传/下载你的仓库（代码）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;申请github账户:38b7fe8ba42feb5431437908455a3b68&#34;&gt;申请GitHub账户&lt;/h3&gt;

&lt;p&gt;就无需多说了，google github 然后上去注册就行&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;安装命令行工具git:38b7fe8ba42feb5431437908455a3b68&#34;&gt;安装命令行工具Git&lt;/h3&gt;

&lt;p&gt;因为我是MacOS 所以本身自带。Linux应该也有，没有的话apt-get一下；Windows的话可以去下载一个GitBash 或者前两天看到一个什么 ’乌龟命令行 tortoise shell‘ 大概是这个名字，没有太留意。总之这一步也不会有什么问题。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;配置本机的公私钥对:38b7fe8ba42feb5431437908455a3b68&#34;&gt;配置本机的公私钥对&lt;/h3&gt;

&lt;p&gt;这一步主要是利用当代流行的非对称加密技术来对你和GitHub的通信进行加密，确保通信安全。
首先检查自己的SSH key&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/.ssh --表示进入名字加&#39;.ssh&#39;的文件夹。如果你之前生成过ssh密钥，那么这个文件夹就应该是存在的
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;提示No such file or directory就说明你目前还没有生成过密钥。&lt;/p&gt;

&lt;p&gt;那么就生成一下吧：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh-keygen -t rsa -C &amp;quot;邮件地址@youremail.com&amp;quot;
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&amp;lt;回车就好&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意1: 此处的邮箱地址，你可以输入自己的邮箱地址；注意2: 此处的「-C」的是大写的「C」&lt;/p&gt;

&lt;p&gt;然后系统会要你输入密码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Enter passphrase (empty for no passphrase):&amp;lt;输入加密串&amp;gt;
Enter same passphrase again:&amp;lt;再次输入加密串&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看到这个界面，说明成功生成公私钥对了：（图片来自于 &lt;a href=&#34;http://www.jianshu.com/p/05289a4bc8b2）&#34;&gt;如何搭建一个独立博客——简明Github Pages与Hexo教程&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://cnfeat.qiniudn.com/11.png&#34; alt=&#34;Mou icon&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;上传刚才生成的public-key:38b7fe8ba42feb5431437908455a3b68&#34;&gt;上传刚才生成的public key&lt;/h3&gt;

&lt;p&gt;(对于非对称加密技术 以后会单独写一写，毕竟自己是西电毕业的，这学期的安全课上老师课件里竟然有很多西电的引用)&lt;/p&gt;

&lt;p&gt;登录github, 右上角头像，然后找到settings，进去之后找到 &lt;code&gt;SSH and GPG keys&lt;/code&gt; 然后 点选 &lt;code&gt;New SSH Key&lt;/code&gt; Title栏随便写名字， Key栏里输入你刚才生成的.pub 文件里面的内容，也就是很长的一串&amp;rsquo;乱码’ （图片来自于 &lt;a href=&#34;http://www.jianshu.com/p/05289a4bc8b2）&#34;&gt;如何搭建一个独立博客——简明Github Pages与Hexo教程&lt;/a&gt;）
&lt;img src=&#34;http://cnfeat.qiniudn.com/s12.jpg&#34; alt=&#34;Mou icon&#34; /&gt;&lt;/p&gt;

&lt;p&gt;好了到这里 你已经向GitHub上传了你的Public key了，理论上这个时候你可以和GitHub通信了，下面测试一下，命令行输入:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh -T git@github.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一次连接可能时间比较久 需要等那么一小会，一般不会有什么问题&lt;/p&gt;

&lt;p&gt;接着 就要设置一下用户信息：Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git config --global user.name &amp;quot;cnfeat&amp;quot;//用户名
$ git config --global user.email  &amp;quot;cnfeat@gmail.com&amp;quot;//填写自己的邮箱
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;上传-下载代码:38b7fe8ba42feb5431437908455a3b68&#34;&gt;上传/下载代码&lt;/h3&gt;

&lt;p&gt;终于。。。下面先在GitHub上新建一个repository(存放处、代码仓库) 就以我的博客代码为例 wjxiz.github.io ，新建完了之后 去一个目录下 比如我这里的 &lt;code&gt;~/github/wjxiz.github.io/public&lt;/code&gt;
接着&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init --表明这个文件夹已经被初始化为一个本地仓库了
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后要和github上的那个远端库联系起来：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git pull https://github.com/wjxiz/wjxiz.github.io --这个地址就是我刚才新建的库的网页地址，直接复制粘贴就行
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;好了，现在已经告诉这个文件夹 和远端，这俩库已经建立连接了，pull的意思是 把远端库的东西给下载到本地来，显然 这个时候是空的，没有下什么指示建立了连接而已。&lt;/p&gt;

&lt;p&gt;ok，这个时候我就可以上传东西了，你可以试着新建一个文件在这个本地仓库，比如test.txt这种，然后命令行输入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add . -- 表示添加本目录下的所有文件到Index缓冲区
git commit -m &#39;first commit&#39; --将Index缓冲区的内容提交到HEAD区
git push origin master --ok ，上传！
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;刷新一下 github仓库页面，是不是看到上传上去的文件了？&lt;/p&gt;

&lt;p&gt;就这么ez，主要有 add commit push pull 这几个命令就可以完成代码的上传下载了。更多的内容可以看一下 &lt;a href=&#34;http://rogerdudler.github.io/git-guide/index.zh.html&#34;&gt;Git简明指南&lt;/a&gt; 这里面有很详细的介绍。&lt;/p&gt;

&lt;p&gt;如何删除github上的一些文件呢？ 总体思路是 ：先pull 下来，再 rm 掉不想要的部分，再 add ，再 commit ，最后push。 思路是这么个思路，具体可能有一些小问题，到时候google一下就行了。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;后记:38b7fe8ba42feb5431437908455a3b68&#34;&gt;后记&lt;/h2&gt;

&lt;p&gt;其实Git最强的地方 我在这里都没有写到，那就是版本管理， 其实一个代码库可以有很多个分支branch 注意 上面push 命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的master 其实表示 是这个仓库的主分支，你可以在github上创建许多分支，然后再push或者Pull的时候 选择其中一个分支， 比如我有一个分支叫 branch01，里面跟master 分支有一些不同，我这个时候想修改branch01里的东西 就可以&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push origin branch01
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样你的修改就被推送到branch01里面了。&lt;/p&gt;

&lt;p&gt;想一想，以后你可以建立一个初始原型项目，然后再里面加各种独立的需求，然后还可以不互相影响，便于测试。&lt;/p&gt;

&lt;p&gt;ok 12点了，我去喝喝水 睡觉了。。。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>网易游戏设计师面试</title>
      <link>http://wjxiz.com/post/netease-interview/</link>
      <pubDate>Tue, 26 Apr 2016 12:04:14 +0200</pubDate>
      
      <guid>http://wjxiz.com/post/netease-interview/</guid>
      <description>

&lt;h2 id=&#34;投简历:051c24c930b3ac277c3a9f3815ceb6a3&#34;&gt;投简历&lt;/h2&gt;

&lt;p&gt;最开始是在实习僧网站上看到网易的招聘信息，说是游戏设计师岗位还在收简历。抱着试一试的态度就投了，也没准备。网易的招聘系统还是比较酷炫的，有非常重的游戏氛围，简历需要填的东西还挺多，包括你的游戏经历、最擅长的游戏等等。上周周四还是周五，记不清了，当时人在车站呢，收到了杭州的电话，说是下周二北京时间9：30电话面试。&lt;/p&gt;

&lt;h2 id=&#34;电话来了:051c24c930b3ac277c3a9f3815ceb6a3&#34;&gt;电话来了&lt;/h2&gt;

&lt;p&gt;突然失眠，六点多才睡着吧。早上电话来的时候，还迷迷糊糊躺在床上呢。面试官声音很年轻，感觉蛮舒服。一开始说我这边声音有点小，于是乎找了个耳机，开始正式电话面试了。&lt;/p&gt;

&lt;p&gt;首先是自我介绍，我就说了我现在在哪，哪里毕业的，学的什么，做过什么等等。然后面试官让我说一下自己的游戏经历，我就差不多按照当时简历里写的内容复述了一遍。因为我里面提到打Dota 代表校队拿了西安第二，所以面试官就说 我们来谈谈dota。&lt;/p&gt;

&lt;p&gt;首先让我说我最擅长的英雄，我就说卡尔、蓝猫和小娜迦。&lt;/p&gt;

&lt;p&gt;面试官：小娜迦是哪一种小娜迦？&lt;/p&gt;

&lt;p&gt;我： 我所有位置的都打过。但是胜率最高的应该是辉耀小娜迦。&lt;/p&gt;

&lt;p&gt;面试官：那好，这个80分钟膀胱的我们就暂且不说啊，说一下你觉得卡尔这个英雄优势在哪里吧。&lt;/p&gt;

&lt;p&gt;我：这个英雄最关键的可以打出高于经济的输出吧。&lt;/p&gt;

&lt;p&gt;面试官：那这个英雄和火女有什么区别？&lt;/p&gt;

&lt;p&gt;我： 这两个英雄其实很像，都是高移速，高输出。火女的强势期要比卡而来的早，她在到达关键等级后 就会有一个非常大的输出提升，而卡尔似乎是没有质变这样的一个概念的。卡尔的高爆发依赖于高等级和良好的装备。&lt;/p&gt;

&lt;p&gt;面试官： 那如果让你设计一个二号位的英雄，就从魔兽里面选一个出来。你怎么设计？ 给你一分钟思考时间&lt;/p&gt;

&lt;p&gt;（1 min later）&lt;/p&gt;

&lt;p&gt;我：科多兽。 四个技能 。。。巴拉巴拉。。。&lt;/p&gt;

&lt;p&gt;面试官：你给出的似乎更偏向于一个三号位的英雄啊，干扰对面补刀，又是力量，而且给我的感觉有点弱。&lt;/p&gt;

&lt;p&gt;我： 。。。额。。。好像真的是这样，新英雄出来都是比较Imba的。。。&lt;/p&gt;

&lt;p&gt;面试官： 还有什么问题吗？&lt;/p&gt;

&lt;p&gt;我：问了一点问题。。。但是感觉问的并不好。。。&lt;/p&gt;

&lt;h2 id=&#34;反思:051c24c930b3ac277c3a9f3815ceb6a3&#34;&gt;反思&lt;/h2&gt;

&lt;p&gt;面试结束之后细想，完全可以回答的上一个台阶的。因为没经验，所以思路太狭隘了。&lt;/p&gt;

&lt;p&gt;比如在设计英雄的时候，应该 考虑两个方向：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;英雄在游戏中的作用，英雄的游戏定位&lt;/li&gt;
&lt;li&gt;玩家的体验&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我面试的时候 只想着怎么去凑4个技能了。所以思路还是狭隘了很多。作为新英雄，首先得有人玩对吧。 怎么才能有人玩呢？ 两点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IMBA&lt;/li&gt;
&lt;li&gt;操作有趣&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;能赢，杀得爽，当然是玩家的基本需求，所以这个很重要，新英雄需要足够的吸引人。 其次你会设计出第二个米波吗？显然米波这种操作级别的英雄，就目前的玩法趋势来说，是不应该再出现的。&lt;/p&gt;

&lt;p&gt;记得当时面试官跟我说，我的英雄推进不厉害，没有控制，又是力量型。不适合做中单。 其实当时我没考虑好，考虑好是可以进行反驳的。 我的科多有一个AOE，一个debuff，一个buff 和一个大。（唉，我突然又想到，你的新英雄 需要考虑到目前的热门英雄是否克制） 控制的意义在于，你控制住他，可以杀了他或者救人。否则你的控其实意义不大。不过现在看来我这个英雄确实很不行啊。 按照面试官的思路，设计2号位英雄需要:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AOE或者高爆发&lt;/li&gt;
&lt;li&gt;控制技能&lt;/li&gt;
&lt;li&gt;推进能力&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不过我觉得目前的二号位还需要一个&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;后期能力&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;就经济来看，游戏中二号位的经济比一号位好是很常见的。所以资源分配上，二号位还是需要很高的权重倾斜的。&lt;/p&gt;

&lt;p&gt;总的来说，就游戏设计这一块，我还是太弱了。基本没有游戏设计的概念，平时只知道玩，思考的还是少了。&lt;/p&gt;

&lt;h2 id=&#34;后记:051c24c930b3ac277c3a9f3815ceb6a3&#34;&gt;后记&lt;/h2&gt;

&lt;p&gt;网易的游戏设计部 好像在杭州，并不是第一目标上海。所以这次面试经历还是挺宝贵的，毕竟网易是国内排名前3的游戏公司。&lt;/p&gt;

&lt;h2 id=&#34;结果-5-9日更新:051c24c930b3ac277c3a9f3815ceb6a3&#34;&gt;结果 (5.9日更新)&lt;/h2&gt;

&lt;p&gt;被拒绝了，和预料的一样。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>contact</title>
      <link>http://wjxiz.com/contact/</link>
      <pubDate>Tue, 26 Apr 2016 00:49:14 +0200</pubDate>
      
      <guid>http://wjxiz.com/contact/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;📬：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;alain.xuyz@gmail.com&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;🐧:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;386554985&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Wechat：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;xyztakeflower&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>http://wjxiz.com/about/</link>
      <pubDate>Tue, 26 Apr 2016 00:48:26 +0200</pubDate>
      
      <guid>http://wjxiz.com/about/</guid>
      <description>

&lt;h3 id=&#34;about-wjxiz:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;About wjxiz&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;2011-2014 @ 西安电子科技大学 网络工程&lt;/li&gt;
&lt;li&gt;2014-现在  @ 巴黎十一大-综合理工学院 Informatique&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;wjxiz是我小学玩梦幻西游时候用的账户名，一直沿用到现在，很多游戏的账户都是这个。&lt;/p&gt;

&lt;p&gt;没错，我差不多可以算一个网瘾青年吧。&lt;/p&gt;

&lt;p&gt;现在在学编程，以后应该会成为一个小程序员吧。&lt;/p&gt;

&lt;h3 id=&#34;like:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;like&lt;/h3&gt;

&lt;p&gt;Apple Dota2 物理 烽火戏诸侯&lt;/p&gt;

&lt;h3 id=&#34;dislike:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;dislike&lt;/h3&gt;

&lt;p&gt;bad emotions&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>博客算是有雏形了</title>
      <link>http://wjxiz.com/post/first/</link>
      <pubDate>Tue, 26 Apr 2016 00:40:48 +0200</pubDate>
      
      <guid>http://wjxiz.com/post/first/</guid>
      <description>

&lt;h3 id=&#34;真折腾:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;真折腾&lt;/h3&gt;

&lt;p&gt;弄了差不多两天，才把博客给初步搭建起来。期间学习了git的使用方法、静态网页的概念、以及集中静态网页生成器的使用.一开始是准备用Jelly, 然后发现pelican这个东西是法国人用Python做的，所以就尝试了一下，但是发现没有足够的前段知识，很难用好。最后把目光转向了Hugo，才弄成了现在这个样子。&lt;/p&gt;

&lt;h3 id=&#34;好难玩:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;好难玩&lt;/h3&gt;

&lt;p&gt;投了差不多有100多封简历，面试三个，好像全都悲剧了。。。突然感觉自己好菜，需要学习的东西太多了。8个小时之后还有一个网易游戏设计师的电话面，希望也不大。基本没做过什么游戏，虽然自己玩游戏很多，但是属于精而不博，感觉和那些专门学习制作游戏的比，眼光和思维广度深度都不够。但是还是试试吧。&lt;/p&gt;

&lt;h3 id=&#34;头很硬:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;头很硬&lt;/h3&gt;

&lt;p&gt;Wings战队昨天拿下了马尼拉ESLONE的冠军，想想自己已经24了，电子竞技梦肯定是越来越没盼头。需要转换转换思想了，把自己当成一个有担当的青年，去追寻一些现实的东西了。要更加努力学习工作才行！&lt;/p&gt;

&lt;h3 id=&#34;睡觉去:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;睡觉去&lt;/h3&gt;

&lt;p&gt;悄悄告诉你，我高考语文不及格。嘘！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://wjxiz.com/post/%E9%A5%AD%E5%BA%97%E5%90%83%E9%A5%AD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wjxiz.com/post/%E9%A5%AD%E5%BA%97%E5%90%83%E9%A5%AD/</guid>
      <description>

&lt;h3 id=&#34;饭店吃饭:dcb7b3f5d033a1bf384f4340c01e20e1&#34;&gt;饭店吃饭&lt;/h3&gt;

&lt;p&gt;徐先生是一个特别特别特别单纯的boy。。单纯到什么程度呢？就是见过他的每一个人都说这孩子挺乖的。。&lt;/p&gt;

&lt;p&gt;认识我的小伙伴都知道徐先生是我买包送的。。其实讲真。。作为一个不喜欢给别人添麻烦的girl。。一开始我是拒绝搭理徐先生的。。总觉得在他那么忙的时候多说一句话都是挺过分的事。。但是这世上毕竟有一种缘分叫做一见钟情。。&lt;/p&gt;

&lt;p&gt;不过我跟徐先生的缘起。。真是可以追溯到很多很多年以前。。2011年的某个夏天。。徐先生在白白手机上第一次看见一个叫贝贝的女生。。当时还很兴奋的调侃了白白几句。。有关于高考的夏天的记忆往往特别深刻。。当他知道我就是那个贝贝的一瞬间。。整个世界都充斥着一种奇妙的感觉。。仿佛我们真的认识了很多很多年。。&lt;/p&gt;

&lt;p&gt;后来就很顺利成章的在一起。。没有任何无谓的忸怩与矜持。。也没有任何不必的矫情与造作。。&lt;/p&gt;

&lt;p&gt;在5月12号之前。。我们真正在一起的时间只有6天。。剩下一百多天的时光里。。我们全靠视频语音度过。。聊天记录已经完全刷不到顶。。对于两个都是刚结束异地恋的人来讲。。再去选择这样子的生活也真是蛮拼的。。我并不完全了解他眼中完美的爱情。。但是却深切的知晓我想要的东西。。陪伴是最长情的告白。。但陪伴并不是他时时刻刻分分秒秒都在我左右。。而是我只要一想起他就满心欢喜。。&lt;/p&gt;

&lt;p&gt;当然。。一段感情里抛却了那些珠光宝气的爱。。剩下的就是悄无声息的生活。。异地恋并没有我曾经以为的那样能接受。。而时光却比我想象的快得多。。我们都有了彼此的生活已经需要努力去完成的东西。。我们也都拥有着完全不同的朋友与生活方式。。我醒着的时候他在午睡。。我正要去睡他却恰好醒了。。我们在不停的错过与追逐。。又在不停的重逢与相遇。。我们明明离得那么远。。却有着那么多重合的轨迹。。&lt;/p&gt;

&lt;p&gt;作为一个单纯且耿直的boy。。早期的徐先生是真的完全是一种女生的心思我不猜的态度。。每次不开心。。我就会说我要去睡了。。徐先生淡定的回了一个哦。。哦！哦！！！听完这句话的我当时就傻了。。当然如果你觉得他会以为我不开心然后来哄我那就真是太太太天真了。。已经不记得有多少次。。我半夜两三点起来。。打开视频。。严肃的徐先生讲。。我们谈谈。。也是不知他有没有被一脸严肃的我吓懵过。。&lt;/p&gt;

&lt;p&gt;然而当我们都很懂得相互珍惜的原理。。所有的问题也就都不再是问题。。不会主动哄女孩子的徐先生也会开始想想看我会喜欢什么。。也会开始陪我挑口红的颜色香水的味道。。乘两个小时的小火车去帮我买包再乘两个小时的小火车回来。。而我也会逐渐收敛起自己太过外露的锋芒。。逐渐放弃自己那么矫情的脾气。。爱一个人无非就是为他做更好的自己。。&lt;/p&gt;

&lt;p&gt;人生就是一场奇妙的旅行。。永远不知下一个转角会遇上什么样的人。。年纪大了的我却更加喜欢做一些矫情的事情。。嗯。。希望以后你们遇见的人都是自己爱的人。。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>